import ddsp
import ddsp.training
import ddsp.spectral_ops

# Macros:
# ==============================================================================
batch_size = 32
learning_rate = 0.0003
input_type = 'mel_spec' # 'mel_spec' or 'audio'

# Parameters for processors.Add:
# ==============================================================================
processors.Add.name = 'add'

# Parameters for Autoencoder:
# ==============================================================================
#Autoencoder.decoder = @decoders.RnnFcDecoder()
Autoencoder.decoder = None #Since ResnetSinusoidalEncoder is equivalent of a base Encoder and Decoder together.
Autoencoder.encoder = @encoders.ResnetSinusoidalEncoder()
Autoencoder.losses = [@losses.SpectralLoss()]
#Autoencoder.preprocessor = @preprocessing.F0LoudnessPreprocessor()
#Autoencoder.preprocessor = @preprocessing.DefaultPreprocessor()
Autoencoder.preprocessor = None
Autoencoder.processor_group = @processors.ProcessorGroup()

# Parameters for exp_sigmoid:
# ==============================================================================
exp_sigmoid.exponent = 10.0
exp_sigmoid.max_value = 2.0
exp_sigmoid.threshold = 1e-07

# Parameters for F0LoudnessPreprocessor:
# ==============================================================================
#F0LoudnessPreprocessor.time_steps = 1000
DefaultPreprocessor.time_steps = 1000

# Parameters for FilteredNoise:
# ==============================================================================
FilteredNoise.initial_bias = -5.0
FilteredNoise.n_samples = 440320 # (256 * 1720 <time dim>)
#FilteredNoise.n_samples = 138240
FilteredNoise.name = 'filtered_noise'
FilteredNoise.scale_fn = @core.exp_sigmoid
FilteredNoise.window_size = 0

# Parameters for get_model:
# ==============================================================================
get_model.model = @models.Autoencoder()

# Parameters for Sinusoidal
# ==============================================================================
Sinusoidal.n_samples = 440320 # num time steps * 256 so it can upsample
#Sinusoidal.n_samples = 138240 # Based on reading in .wav file
Sinusoidal.sample_rate = 44100

# Parameters for ResnetSinusoidalEncoder:
# ==============================================================================
ResnetSinusoidalEncoder.spectral_fn = @compute_logmel_spec
#ResnetSinusoidalEncoder.spectral_fn = @compute_logmel
#ResnetSinusoidalEncoder.spectral_fn = @compute_logmel_resnet
ResnetSinusoidalEncoder.size = 'small'
ResnetSinusoidalEncoder.output_splits = \
    (('frequencies', 100), ('amplitudes', 100), ('noise_magnitudes', 60))

# Parameters for oscillator_bank:
# ==============================================================================
oscillator_bank.sum_sinusoids = True
oscillator_bank.use_angular_cumsum = False

# Parameters for ProcessorGroup:
# ==============================================================================
ProcessorGroup.dag = \
    [(@synths.Sinusoidal(), ['amplitudes', 'frequencies']),
     (@synths.FilteredNoise(), ['noise_magnitudes']),
     (@processors.Add(), ['filtered_noise/signal', 'sinusoidal/signal']),
     (@effects.Reverb(), ['add/signal'])]

# Parameters for Reverb:
# ==============================================================================
Reverb.add_dry = True
Reverb.name = 'reverb'
Reverb.reverb_length = 48000
Reverb.trainable = True

# Parameters for RnnFcDecoder:
# ==============================================================================
RnnFcDecoder.ch = 512
RnnFcDecoder.input_keys = ('ld_scaled', 'f0_scaled')
RnnFcDecoder.layers_per_stack = 3
RnnFcDecoder.output_splits = \
    (('amps', 1), ('harmonic_distribution', 60), ('noise_magnitudes', 65))
RnnFcDecoder.rnn_channels = 512
RnnFcDecoder.rnn_type = 'gru'

# Parameters for run_dag:
# ==============================================================================
run_dag.verbose = True

# Parameters for Harmonic:
# ==============================================================================
Harmonic.n_samples = 64000
Harmonic.name = 'harmonic'
Harmonic.normalize_below_nyquist = True
Harmonic.sample_rate = 16000
Harmonic.scale_fn = @core.exp_sigmoid

# Parameters for SoloViolin:
# ==============================================================================
SoloViolin.example_secs = 4
SoloViolin.file_pattern = None
SoloViolin.frame_rate = 250
SoloViolin.sample_rate = 16000

# Parameters for SpectralLoss:
# ==============================================================================
SpectralLoss.cumsum_freq_weight = 0.0
SpectralLoss.delta_freq_weight = 0.0
SpectralLoss.delta_time_weight = 0.0
SpectralLoss.fft_sizes = (2048, 1024, 512, 256, 128, 64)
SpectralLoss.logmag_weight = 1.0
SpectralLoss.loss_type = 'L1'
SpectralLoss.loudness_weight = 0.0
SpectralLoss.mag_weight = 1.0
SpectralLoss.name = 'spectral_loss'

# Parameters for train:
# ==============================================================================
train.batch_size = %batch_size
train.data_provider = @data.SoloViolin()
train.num_steps = 50000
train.steps_per_save = 500
train.steps_per_summary = 300

# Parameters for Trainer:
# ==============================================================================
Trainer.checkpoints_to_keep = 200
Trainer.grad_clip_norm = 3.0
Trainer.learning_rate = %learning_rate
Trainer.lr_decay_rate = 0.98
Trainer.lr_decay_steps = 10000
Trainer.restore_keys = None
